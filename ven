local Mode  = "Walk"   -- Tween, Walk (Walk is less buggy!)

--  services

local Players   = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService    = game:GetService("RunService")
local TweenService  = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PathfindingService    = game:GetService("PathfindingService")

--  variables

local Map   = Workspace:WaitForChild("Map")
local NPCs  = Workspace:WaitForChild("NPCS")
local Player    = Players.LocalPlayer
local Gui   = Player:WaitForChild("PlayerGui")
local DungeonGui   = Gui:WaitForChild("DungeonClear")
local GameUI  = Gui:WaitForChild("GameUI"):WaitForChild("HUD"):WaitForChild("MainFrame")
local Mouse = Player:GetMouse()
local Stats    = Player:WaitForChild("stats")
local Remotes   = ReplicatedStorage:WaitForChild("Remotes")
local ItemData  = ReplicatedStorage:WaitForChild("ItemData")
local BowAttack   = Remotes.Action.BowAttack
local MeleeAttack   = Remotes.Action.MeleeAttack
local MagicAttack   = Remotes.Action.MagicAttack
local Projectiles   = Workspace:WaitForChild("Projectiles")
local IPDFunctions = require(ReplicatedStorage:WaitForChild("Modules").IPDFunctions)
local WeaponOneLast = tick()
local WeaponTwoLast = tick()
local WeaponOneRange    = 30
local WeaponTwoRange    = 30
local ControlSettings  = ReplicatedStorage:WaitForChild("ControlSettings")
local forceLook = Mouse.Hit.Position
local ItemTypes = {
    Melee   = {
        "Hammer",
        "Dagger",
        "Axe",
        "Spear",
        "Sword",
        "Rapier",
        "Polearm",
        "Greatsword",
        "Katana",
    },

    Bow = {
        "Bow",
        "Crossbow",
    },

    Staff   = {
        "Staff",
        "Wand",
        "Book",
    }
}

--  functions

local function getWeaponType()
    local myRemoteCalls = {}
    local toCheck   = {
        Stats.Equipped:FindFirstChild("Wep1"),
        Stats.Equipped:FindFirstChild("Wep2"),
    }

    for i,v in pairs(toCheck) do
        if v then
            local myBow = v and table.find(ItemTypes.Bow, v.ItemType.Value)
            local myStaff   = v and table.find(ItemTypes.Staff, v.ItemType.Value)
            local myMelee  = v and table.find(ItemTypes.Melee, v.ItemType.Value)
            local myWeapon  = myMelee or myStaff or myBow
            local myRemote  = myStaff and MagicAttack or myMelee and MeleeAttack or myBow and BowAttack
    
            if myWeapon and myRemote then
                local realItem  = ItemData[v.ItemType.Value][v.ItemID.Value]
                local myBoost   = IPDFunctions:GetBoostValue(Player.Character, "AttackSpeedBoost")
                local myTags = realItem:FindFirstChild("Tags")

                if myTags then
                    for i, c in pairs(myTags:GetChildren()) do
                        myBoost = myBoost + IPDFunctions:GetBoostValue(Player.Character, c.Name .. "AttackSpeedBoost")
                    end;
                end;

                local attackSpeed   = 1 / (realItem.AttackSpeed.Value * 1.03 ^ (v.Rarity.Value - realItem.BaseRarity.Value) * (1 + myBoost / 100))
                local weaponIndex   = v.Name:gsub("Wep", "")

                if realItem:FindFirstChild("Range") then
                    if tonumber(weaponIndex) == 1 then 
                        WeaponOneRange   = realItem.Range.Value+7.5
                    else 
                        WeaponTwoRange    = realItem.Range.Value+7.5
                    end
                end
                table.insert(myRemoteCalls, {myRemote, tonumber(weaponIndex), attackSpeed})
            end
        end
    end

    return myRemoteCalls
end

local function checkHumanoid(character)
    if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
        return true
    end

    return false
end

local function getClosestEnemy()
    local closestEnemy  = nil
    local closestDistance   = math.huge

    for _,v in pairs(NPCs:GetChildren()) do
        if checkHumanoid(v) and checkHumanoid(Player.Character) then
            local theirDistance = (Player.Character.HumanoidRootPart.CFrame.Position-v.HumanoidRootPart.CFrame.Position).magnitude

            if theirDistance <= closestDistance then
                closestEnemy    = v.HumanoidRootPart
                closestDistance = theirDistance
            end
        end
    end

    return closestEnemy
end

local function buildCharacter(character)
    local myGyro    = character:WaitForChild("HumanoidRootPart"):WaitForChild("BodyGyro")
    local myTurn    = character:WaitForChild("BodyTurning"):WaitForChild("BodyTurning")
    myTurn  = getsenv(myTurn)

    myTurn.GetMousePoint    = function() return forceLook end
    --[[myGyro:GetPropertyChangedSignal("CFrame"):Connect(function()
        myGyro.CFrame   = CFrame.new(character.HumanoidRootPart.CFrame.Position, forceLook)
    end)]]
end

local function flyTo(newMove)
    --[[local flySpeed  = (Player.Character.HumanoidRootPart.CFrame.Position-newMove).magnitude/16
    local flyTween  = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(flySpeed, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {
        CFrame  = CFrame.new(newMove)
    })
    flyTween:Play()]]
    local flyTween  = Instance.new("BodyPosition")
    flyTween.Position = newMove
    flyTween.MaxForce  = Vector3.new(math.huge, math.huge, math.huge)
    flyTween.P = 18000
    flyTween.Parent = Player.Character.HumanoidRootPart

    --task.wait(flySpeed)
    repeat RunService.RenderStepped:Wait() until (Player.Character.HumanoidRootPart.CFrame.Position-newMove).magnitude <= 2.5
    flyTween:Destroy()
end

if Player.Character then
    buildCharacter(Player.Character)
end
Player.CharacterAdded:Connect(function(character)
    buildCharacter(character)
end)

RunService.Heartbeat:Connect(function()
    if checkHumanoid(Player.Character) then
        local myTargets = {
            Targets = {},
            Time    = tick(),
        }

        for _,v in pairs(NPCs:GetChildren()) do
            if checkHumanoid(v) then
                local distance  = (Player.Character.HumanoidRootPart.CFrame.Position-v.HumanoidRootPart.CFrame.Position).magnitude
                if distance <= WeaponOneRange or distance <= WeaponTwoRange then
                    table.insert(myTargets.Targets, {
                        KnockbackDirection  = Player.Character.HumanoidRootPart.CFrame.lookVector*-2,
                        TargetCharacter = v,
                    })
                end
            end
        end
        
        if Player.Character.Humanoid.Health <= Player.Character.Humanoid.MaxHealth/2.5 and not GameUI["Item4"].CooldownLabel.Visible then
            Remotes.Action.ActivateAbility:FireServer(6)
        end

        if #myTargets.Targets >= 1 then
            local myRemotes = getWeaponType()

            if #myRemotes >= 1 then
                for _,v in pairs(myRemotes) do
                    if v[2] == 1 and tick()-WeaponOneLast >= v[3] or v[2] == 2 and tick()-WeaponTwoLast >= v[3] then
                        if v[2] == 1 then
                            WeaponOneLast   = tick()
                        else
                            WeaponTwoLast   = tick()
                        end
                        v[1]:FireServer(v[2], myTargets)

                        for _,v in pairs(GameUI:GetChildren()) do
                            if (v.Name:find("Item") and v.Name ~= "Item4" or v.Name:find("Skill")) and not v.CooldownLabel.Visible and v.Obj.Value then
                                local myItem    = v.Name:gsub("Item", ""):gsub("Skill", "")
                                myItem  = tonumber(myItem)

                                if v.Name:find("Item") then
                                    myItem  += 1
                                end
                                Remotes.Action.ActivateAbility:FireServer(myItem)
                            end
                        end
                    end
                end
            end
        end
    end
end)

oldNamecall = hookfunction(getrawmetatable(game).__namecall, newcclosure(function(self, ...)
    local myArgs    = {...}
    local callMethod    = getnamecallmethod()

    if callMethod == "FireServer" and self.Name == "UpdateMouseDirection" then
        myArgs[1]  = forceLook
    end

    return oldNamecall(self, unpack(myArgs))
end))

while RunService.RenderStepped:Wait() do
    pcall(function()
        local myTarget  = getClosestEnemy()
        
        if Projectiles:FindFirstChild("WaitingForPlayers") or Projectiles:FindFirstChild("BossWaitingForPlayers") or Map:FindFirstChild("LootChest") and not DungeonGui.LootContainer.Visible then
            myTarget    = Projectiles:FindFirstChild("WaitingForPlayers") and Projectiles["WaitingForPlayers"] or Projectiles:FindFirstChild("BossWaitingForPlayers") and Projectiles["BossWaitingForPlayers"] or Map["LootChest"].PrimaryPart
        end

        if myTarget and checkHumanoid(Player.Character) and myTarget.Parent then
            for _,v in pairs(Map:GetChildren()) do
                if v.Name:find("Gate") then
                    v:Destroy()
                end
            end

            for _,v in pairs(Map.Segments:GetDescendants()) do
                if v:IsA("BasePart") and v.Transparency > 0 then
                    v.CanCollide    = false
                end
            end

            local myPath    = PathfindingService:CreatePath()
            local originPath    = myTarget.CFrame.Position
            myPath:ComputeAsync(Player.Character.HumanoidRootPart.CFrame.Position, originPath)

            if myPath.Status == Enum.PathStatus.Success then
                myPath  = myPath:GetWaypoints()

                for i,v in pairs(myPath) do
                    local newMove   = v.Position+Vector3.new(0, 2.5, 0)
                    forceLook   = newMove

                    local attempts  = 0
                    local maxAttempts   = 32

                    if Mode:lower() == "walk" then
                        repeat 
                            task.wait(0.1)

                            attempts    += 1
                            if v.Action == Enum.PathWaypointAction.Jump or attempts >= math.floor(maxAttempts/1.15) then
                                Player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                            end
                            Player.Character.Humanoid.MaxSlopeAngle = 89.9
                            Player.Character.Humanoid:MoveTo(newMove)

                            if not GameUI.Dash.CooldownLabel.Visible then
                                Remotes.Action.ActivateAbility:FireServer(999)
                            end
                        until attempts >= maxAttempts or (Player.Character.HumanoidRootPart.CFrame.Position-newMove).magnitude <= 2.5 or not myTarget or not myTarget.Parent or myTarget.Parent:FindFirstChild("Humanoid") and myTarget.Parent.Humanoid.Health <= 0 or (myTarget.CFrame.Position-originPath).magnitude >= 5
                    else
                        flyTo(newMove)
                    end
                    
                    if myTarget and myTarget.Parent and myTarget.Parent:FindFirstChild("Humanoid") and myTarget ~= getClosestEnemy() or not myTarget or not myTarget.Parent or myTarget.Parent:FindFirstChild("Humanoid") and myTarget.Parent.Humanoid.Health <= 0 or attempts >= maxAttempts or (myTarget.CFrame.Position-originPath).magnitude >= 5 or i >= 8 then
                        break
                    end
                end

                if myTarget and myTarget.Parent and myTarget.Parent.Name == "LootChest" and myTarget:FindFirstChild("LootChestAttachment") then
                    fireproximityprompt(myTarget.LootChestAttachment.LootPrompt)

                    repeat RunService.RenderStepped:Wait() until DungeonGui.LootContainer.Visible
                    Remotes.UI.EndDungeon.EndOfDungeonVote:FireServer("ReplayDungeon")
                end
            elseif Player.Character and Player.Character:FindFirstChild("Humanoid") and myTarget and myTarget.Parent then
                forceLook   = myTarget.CFrame.Position

                if Mode:lower() == "Walk" then
                    Player.Character.Humanoid:MoveTo(myTarget.CFrame.Position)
                else
                    flyTo(myTarget.CFrame.Position)
                end
            end
        end
    end)
end
